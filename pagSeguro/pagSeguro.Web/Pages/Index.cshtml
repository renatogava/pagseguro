@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Bem-vindo</h1>
    <p>Página de teste para Pagamentos via pagSeguro.</p>
</div>

<form id="form">

    <h2>Valor do Pedido</h2>

    <table>
        <tr>
            <td>
                <label for="totalPrice">Valor Total</label>
                <input type="number" id="totalPrice" value="50" />
            </td>
        </tr>
    </table>

    <h2>Dados do Cliente</h2>
    <table>

        <tr>
            <td>
                <label for="holderBirthDate">Nome</label>
                <input type="text" id="customerName" value="Renato de Freitas Gava">
            </td>
        </tr>

        <tr>
            <td>
                <label for="customerBirthDate">Data de Nascimento</label>
                <input type="text" id="customerBirthDate" value="28/01/1984">
            </td>
        </tr>

        <tr>
            <td>
                <label for="customerCpf">CPF</label>
                <input type="text" id="customerCpf" value="314.233.158-12">
            </td>
        </tr>

        <tr>
            <td>
                <label for="customerPhone">Telefone</label>
                <input type="text" id="customerPhone" value="(11) 99535-1984">
            </td>
        </tr>

        <tr>
            <td>
                <label for="customerEmail">Email</label>
                <input type="text" id="customerEmail" value="renatogava2@live.com">
            </td>
        </tr>

    </table>

    <h2>Endereço de Entrega</h2>
    <table>

        <tr>
            <td>
                <label for="zipPostalCode">CEP</label>
                <input type="text" id="zipPostalCode" value="13214-799">
            </td>
        </tr>

        <tr>
            <td>
                <label for="street">Endereço</label>
                <input type="text" id="street" value="R. das Cicas">
            </td>
        </tr>

        <tr>
            <td>
                <label for="streetNumber">Número</label>
                <input type="text" id="streetNumber" value="766">
            </td>
        </tr>

        <tr>
            <td>
                <label for="complement">Complemento</label>
                <input type="text" id="complement" value="">
            </td>
        </tr>

        <tr>
            <td>
                <label for="neighbourhood">Bairro</label>
                <input type="text" id="neighbourhood" value="Corrupira">
            </td>
        </tr>

        <tr>
            <td>
                <label for="city">Cidade</label>
                <input type="text" id="city" value="Jundiaí">
            </td>
        </tr>
        <tr>
            <td>
                <label for="state">SP</label>
                <input type="text" id="state" value="SP">
            </td>
        </tr>

    </table>


    <h2>Dados do Cartão</h2>
    <table>
        <tr>
            <td>
                <label for="cardHolderName">Titular do Cartão</label>
                <input type="text" id="cardHolderName">
            </td>
        </tr>

        <tr>
            <td>
                <label for="cardNumber">Número do Cartão</label>
                <input type="text" id="cardNumber">
            </td>
        </tr>

        <tr>
            <td>
                <label for="cardExpiration">Expiração</label>
                <input type="text" id="cardExpiration">
            </td>
        </tr>

        <tr>
            <td>
                <label for="cardCode">Código de Segurança</label>
                <input type="text" id="cardCode">
            </td>
        </tr>

        <tr>
            <td>
                <label for="numberOfPayments">Número de Parcelas</label>
                <select id="numberOfPayments">
                </select>
            </td>
        </tr>
    </table>

    <h2>Campos Auxiliares</h2>

    <table>
        <tr>
            <td>
                <label for="sessionId">SessionId</label>
                <input type="text" id="sessionId" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="senderHash">SenderHash</label>
                <input type="text" id="senderHash" />
            </td>
        </tr>
        <tr>
            <td>
                <label for="installmentValue">Valor da Parcela</label>
                <input type="text" id="installmentValue" />
            </td>
        </tr>

        <tr>
            <td>
                <label for="creditCardToken">Credit Card Token</label>
                <input type="text" id="creditCardToken" />
            </td>
        </tr>

        <tr>
            <td>
                <label for="creditCardType">Bandeira</label>
                <input type="text" id="creditCardType" />
            </td>
        </tr>

    </table>

    <input type="button" id="creditCardButton" value="Pagar Cartão de Crédito" />

    <input type="button" id="boletoButton" value="Pagar Boleto" />

</form>

<script src="https://stc.pagseguro.uol.com.br/pagseguro/api/v2/checkout/pagseguro.directpayment.js"></script>

<script>

    //api (prod)
    // const apiUrl = 'https://contracorrenteapi.ambientesai9.com.br';

    //api (dev)
    const apiUrl = 'https://localhost:7037';

    //campos
    const creditCardButton = document.getElementById('creditCardButton');
    const boletoButton = document.getElementById('boletoButton');

    const totalPrice = document.getElementById('totalPrice');

    //credit card
    const cardHolderName = document.getElementById('cardHolderName');
    const numberOfPayments = document.getElementById('numberOfPayments');
    const cardNumber = document.getElementById('cardNumber');
    const creditCardType = document.getElementById('creditCardType');
    const cardExpiration = document.getElementById('cardExpiration');
    const cardCode = document.getElementById('cardCode');

    //campos cliente
    const customerName = document.getElementById('customerName');
    const customerEmail = document.getElementById('customerEmail');
    const customerCpf = document.getElementById('customerCpf');
    const customerPhone = document.getElementById('customerPhone');
    const customerBirthDate = document.getElementById('customerBirthDate');

    //campos endereço
    const shippingZipPostalCode = document.getElementById('zipPostalCode');
    const shippingStreet = document.getElementById('street');
    const shippingNumber = document.getElementById('streetNumber');
    const shippingComplement = document.getElementById('complement');
    const shippingNeighbourhood = document.getElementById('neighbourhood');
    const shippingCity = document.getElementById('city');
    const shippingState = document.getElementById('state');

    //campos auxiliares
    const sessionId = document.getElementById('sessionId');
    const senderHash = document.getElementById('senderHash');
    const installmentValue = document.getElementById('installmentValue');
    const creditCardToken = document.getElementById('creditCardToken');

    document.addEventListener('DOMContentLoaded', () => {

        saveSenderHash();

        saveSessionId();
    });

    cardNumber.addEventListener('change', () => {

        var cardNumberValue = cardNumber.value.replace(/ /g, '');

        esconderErro();

        getBrand(cardNumberValue);
    });

    numberOfPayments.addEventListener('change', () => {

        var selected = numberOfPayments.options[numberOfPayments.selectedIndex];

        var selectedInstallment = selected.dataset.installment;

        installmentValue.value = selectedInstallment;
    });

    creditCardButton.addEventListener('click', (e) => {

        esconderErro();

        createCardToken();
    });

    boletoButton.addEventListener('click', (e) => {

        esconderErro();

        processBoletoPayment();
    });

    function saveSessionId() {

        var headers = new Headers();
        headers.append("Authorization", "Basic ZWRpdG9yYWNvbnRyYWNvcnJlbnRlOmhPWHk4JXdhWGRUKg==");

        var requestOptions = {
            method: 'POST',
            headers: headers,
            body: ''
        };

        fetch(apiUrl + "/payments/getsessionid", requestOptions)
            .then(response => response.json())
            .then(json => {
                sessionId.value = json.sessionId;
                PagSeguroDirectPayment.setSessionId(json.sessionId);
            })
            .catch(error => console.log('error', error));
    }

    function saveSenderHash() {
        var senderHashValue = PagSeguroDirectPayment.getSenderHash();

        if (senderHashValue == null || senderHashValue == '') {
            setTimeout(function () {
                saveSenderHash();
            }, 2000);
        }
        else {
            senderHash.value = senderHashValue;
        }
    }

    function getBrand(cardNumberValue) {

        PagSeguroDirectPayment.getBrand({

            cardBin: cardNumberValue,
            success: function (response) {

                var creditCardBrandName = response.brand.name;

                if (creditCardBrandName != '') {

                    creditCardType.value = creditCardBrandName;

                    getInstallments(creditCardBrandName);
                }
                else {
                    exibirErro();
                }
            },
            error: function (response) {
                console.log(response);
            }
        });
    }

    function getInstallments(creditCardBrandName) {

        var totalPriceValue = parseFloat(totalPrice.value).toFixed(2);

        PagSeguroDirectPayment.getInstallments({

            amount: totalPriceValue,
            maxInstallmentNoInterest: 12, // máximo de parcelas sem juros
            brand: creditCardBrandName,
            success: function (response) {

                if (!response.error) {

                    //remove todas as opções de parcelamento
                    var i, L = numberOfPayments.options.length - 1;
                    for (i = L; i >= 0; i--) {
                        numberOfPayments.remove(i);
                    }

                    //valor da parcela por equanto é o valor total
                    installmentValue.value = totalPriceValue;

                    var tam = 12;
                    if (tam > response.installments[creditCardBrandName].length)
                        tam = response.installments[creditCardBrandName].length;

                    for (var j = 0; j < tam; j++) {

                        var auxObj = response.installments[creditCardBrandName][j];

                        var valorParcela = auxObj.installmentAmount.toFixed(2).replace('.', ',');
                        var valorTotal = auxObj.totalAmount.toFixed(2).replace('.', ',');

                        var obj = {
                            Id: auxObj.quantity,
                            texto: '' + auxObj.quantity + 'x ' + (auxObj.interestFree ? 'Sem Juros' : 'Com Juros') + ' de R$ ' + valorParcela + '. Total de R$ ' + valorTotal
                        };

                        var content = '<option value="' + obj.Id + '" data-installment="' + auxObj.installmentAmount + '"> ' + obj.texto + '</option>';

                        //insere opção de parcelamento
                        numberOfPayments.insertAdjacentHTML('beforeend', content);
                    };
                }
                else {
                    exibirErro();
                }
            },
            error: function (response) {
                exibirErro();
            }
        });
    }

    function createCardToken() {

        var cardNumberVal = cardNumber.value.replace(/ /g, '');
        var cvvVal = cardCode.value.replace(/ /g, '');

        var expiration = cardExpiration.value;

        var expirationMonthVal = expiration.substring(0, 2);
        var expirationYearVal = '20' + expiration.substring(3, 5);

        if (cardNumberVal != '' &&
            cvvVal != '' &&
            expirationMonthVal != '' &&
            expirationYearVal != '') {
            PagSeguroDirectPayment.createCardToken({
                cardNumber: cardNumberVal,
                cvv: cvvVal,
                expirationMonth: expirationMonthVal,
                expirationYear: expirationYearVal,
                success: function (response) {

                    var creditCardTokenVal = response.card.token;

                    creditCardToken.value = creditCardTokenVal;

                    processCreditCardPayment();
                },
                error: function (response) {
                    exibirErro();
                }
            });
        }
    }

    function processCreditCardPayment() {

        var body = JSON.stringify({
            "customer": {
                "name": customerName.value,
                "email": customerEmail.value,
                "cpf": customerCpf.value,
                "phone": customerPhone.value,
                "birthDate": customerBirthDate.value,
                "shippingaddress": {
                    "zipPostalCode": shippingZipPostalCode.value,
                    "street": shippingStreet.value,
                    "number": shippingNumber.value,
                    "complement": shippingComplement.value,
                    "neighbourhood": shippingNeighbourhood.value,
                    "city": shippingCity.value,
                    "state": shippingState.value
                },
                "billingaddress": null
            },
            "creditCardInfo": {
                "holderName": cardHolderName.value,
                "creditCardToken": creditCardToken.value,
                "numberOfPayments": numberOfPayments.value,
                "installmentValue": installmentValue.value
            },
            "amount": totalPrice.value,
            "senderHash": senderHash.value
        });

        var headers = new Headers();
        headers.append('Content-Type', 'application/json');
        headers.append("Authorization", "Basic ZWRpdG9yYWNvbnRyYWNvcnJlbnRlOmhPWHk4JXdhWGRUKg==");

        var requestOptions = {
            method: 'POST',
            headers: headers,
            body: body
        };

        fetch(apiUrl + '/payments/creditcard', requestOptions)
            .then(response => response.json())
            .then(json => {
                if (json.succeeded) {
                    alert('Pagamento realizado com sucesso');
                }
                else {
                    alert(json.errorMessage);
                }
            })
            .catch(error => console.log('error', error));
    }

    function processBoletoPayment() {
        var body = JSON.stringify({
            "customer": {
                "name": customerName.value,
                "email": customerEmail.value,
                "cpf": customerCpf.value,
                "phone": customerPhone.value,
                "birthDate": customerBirthDate.value,
                "shippingaddress": {
                    "zipPostalCode": shippingZipPostalCode.value,
                    "street": shippingStreet.value,
                    "number": shippingNumber.value,
                    "complement": shippingComplement.value,
                    "neighbourhood": shippingNeighbourhood.value,
                    "city": shippingCity.value,
                    "state": shippingState.value
                }
            },
            "amount": totalPrice.value,
            "senderHash": senderHash.value
        });

        var headers = new Headers();
        headers.append('Content-Type', 'application/json');
        headers.append("Authorization", "Basic ZWRpdG9yYWNvbnRyYWNvcnJlbnRlOmhPWHk4JXdhWGRUKg==");

        var requestOptions = {
            method: 'POST',
            headers: headers,
            body: body
        };

        fetch(apiUrl + '/payments/boleto', requestOptions)
            .then(response => response.json())
            .then(json => {
                if (json.succeeded) {
                    alert('Pagamento realizado com sucesso');
                    window.open(json.boletourl, '_blank');
                }
                else {
                    alert(json.errorMessage);
                }
            })
            .catch(error => console.log('error', error));
    }

    function exibirErro() {

    }

    function esconderErro() {

    }

</script>